🔍 What is a Meta-Annotation in Spring Boot (and Java in general)?
A meta-annotation is an annotation that is used to annotate other annotations.
In Spring Boot and Spring Framework, meta-annotations are widely used to build custom annotations with built-in Spring behavior
	like @Component, @Transactional, @RequestMapping, etc.

🧠 Java Meta-Annotations (Standard)
Java provides built-in meta-annotations like:

Meta-Annotation		Purpose
@Target				- Specifies where the annotation can be applied (method, class, field, etc.)
@Retention			- Defines how long the annotation is retained (source, class, runtime)
@Inherited			- Allows subclasses to inherit annotations
@Documented			- Includes annotation in Javadoc

✅ Spring's Use of Meta-Annotations
Spring allows developers to create custom annotations that behave like Spring-managed beans or configurations by combining
 annotations.

🧾 Example 1: Spring’s own @RestController
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Controller
@ResponseBody
public @interface RestController {
}
Here, @RestController is itself annotated with @Controller and @ResponseBody.
So, it acts as a meta-annotation wrapper to reduce boilerplate.

🧾 Example 2: Creating Your Own Meta-Annotation
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Component
public @interface MyService {
}
Now, you can use @MyService on a class:

@MyService
public class MyBusinessLogic {
}
Spring will treat it like a @Component-scanned bean because of the meta-annotation.

🔁 Why Use Meta-Annotations in Spring Boot?
✅ Reduce repetitive annotations
✅ Create domain-specific annotations (like @SecuredAdmin, @JsonApi, etc.)
✅ Promote cleaner and more maintainable code
✅ Encapsulate complex configurations or behaviors

🧠 Bonus: Composed Annotations
Spring calls these composed annotations—annotations that combine other annotations using meta-annotations.

✅ Summary
Term				Description
Meta-Annotation		- Annotation that is applied on another annotation
Use in Spring		- To create custom annotations with built-in behavior
Example				- @RestController = @Controller + @ResponseBody
Custom Usage		- @MyService = @Component

==============================================================================

To implement basic authentication in Spring Boot using a properties file — and ensure it happens before the request reaches 
	the controller — you can achieve this in a clean way using Spring Security with in-memory user details configured in 
	application.properties or application.yml.

✅ Goal:
Authenticate users before hitting the controller
Users and passwords defined in application.properties
Use Spring Security filter chain to intercept requests

✅ Step-by-Step Implementation
1️⃣ Add Spring Security Dependency
If you're using Maven:
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-security</artifactId>
</dependency>
2️⃣ Configure Users in application.properties
spring.security.user.name=admin
spring.security.user.password=admin123
spring.security.user.roles=ADMIN
You can also add multiple users via custom configuration (explained below).

3️⃣ Secure All Endpoints by Default
Spring Security automatically secures all endpoints unless configured otherwise.

4️⃣ Create a Simple Controller
@RestController
@RequestMapping("/api")
public class DemoController {

    @GetMapping("/hello")
    public String hello() {
        return "Hello, authenticated user!";
    }
}
If you now call /api/hello, it will prompt for Basic Auth credentials.

5️⃣ Customize Security (Optional – if you want multiple users or roles)
@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth
                .anyRequest().authenticated()
            )
            .httpBasic() // enables Basic Auth
            .and()
            .csrf().disable(); // disable for testing purposes

        return http.build();
    }

    @Bean
    public UserDetailsService userDetailsService() {
        var user1 = User.withUsername("admin")
                .password("{noop}admin123") // {noop} = no password encoder
                .roles("ADMIN")
                .build();

        var user2 = User.withUsername("user")
                .password("{noop}user123")
                .roles("USER")
                .build();

        return new InMemoryUserDetailsManager(user1, user2);
    }
}
☝️ Here we define multiple users programmatically, not via application.properties.

🧪 Testing
Call your endpoint:
GET http://localhost:8080/api/hello
Use basic auth with:
Username: admin
Password: admin123

✅ If credentials are correct, controller executes.
❌ If wrong, Spring returns 401 Unauthorized before reaching the controller.

🔐 Optional: Custom Auth Message (Before Controller)
If you want to add custom auth logic, you can write a filter or authentication provider, but for most apps, the above setup 
	is clean and secure.

✅ Summary
Goal								Achieved?
Auth before controller				- ✅ Yes
Config via application.properties	- ✅ Yes (simple user)
Easily extendable					- ✅ Use custom beans
Uses Spring Security filter chain	- ✅ Yes

================================================================================

🔐 1. CSRF – Cross-Site Request Forgery
✅ What is it?
CSRF (Cross-Site Request Forgery) is an attack where a malicious website causes a user’s browser to perform unintended actions
 on another website where the user is authenticated.

🔁 Real-world example:
Imagine you are logged into your banking site. Then, you visit a malicious site that silently sends a request to:
POST https://mybank.com/transfer-money
Body: amount=5000&toAccount=attacker123
Since you're already logged in, your session cookies are sent automatically, and the bank processes the request, thinking it's 
	from you!

🛡️ How to Prevent CSRF?
CSRF Tokens: The server sends a unique token with every form. When the client submits the form, it must include this token.
Spring Security automatically adds and validates CSRF tokens for state-changing requests (POST, PUT, DELETE).
📌 CSRF is a concern mainly for stateful apps using cookies for auth.

🔐 2. JWT – JSON Web Token
✅ What is it?
JWT (JSON Web Token) is a compact, self-contained token used to securely transmit information between parties as a JSON object.

JWT is commonly used for:
Authentication (stateless login)
Authorization (roles/permissions)
Secure API communication

🧱 JWT Structure:
A JWT has three parts:
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.         // Header
eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxN... // Payload
SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c   // Signature
Header – Type & signing algorithm
Payload – Data like user ID, roles, issued-at time
Signature – To verify the token’s integrity

🔐 JWT Authentication Flow:
User logs in with username/password.
Server validates and returns a JWT token.
Client sends this token in Authorization header for each API call:
Authorization: Bearer <token>
Server validates token and grants access — no session needed!

🧾 Key Differences Between CSRF and JWT
Feature				CSRF							JWT
Type				Security vulnerability			Authentication/Authorization method
Affects				Cookie-based sessions			Not applicable
Prevented By		CSRF tokens						N/A
Requires State?		Yes (session state)				No (stateless)
Use Case			Prevents cross-site attacks		Secure token-based auth

✅ Summary
Term	Full Form						Role
CSRF	Cross-Site Request Forgery		Security threat to defend against
JWT		JSON Web Token					Mechanism for stateless auth

====================================================================================

🌱 What is Scope in Spring Boot?
Scope defines the lifecycle and visibility of a Spring bean — i.e., how long the bean instance lives and when a new instance
 is created.

✅ Default Scope: singleton
One instance per Spring IoC container
Shared across the entire application context
Default for all Spring beans

🧾 Common Spring Scopes
Scope				Description												Typical Use Case
singleton (default)	Single shared instance per Spring container				Stateless service beans
prototype			New instance every time the bean is requested			Stateful or short-lived objects
request				One bean instance per HTTP request						Web applications, per HTTP request data
session				One bean instance per HTTP session						User session data in web apps
application			One instance per ServletContext (application-wide)		Shared resources in a web app
websocket			One instance per WebSocket session						WebSocket-based communication

🔧 How to Set Scope in Spring Boot
You use the @Scope annotation on your bean or component class.
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

@Component
@Scope("prototype")
public class MyPrototypeBean {
    // ...
}
🧠 Example: Common Scopes Usage
@Service
@Scope("singleton") // optional, singleton is default
public class MySingletonService {
    // One instance for entire app
}

@Component
@Scope("prototype")
public class MyPrototypeComponent {
    // New instance every injection/request
}

@Component
@Scope(value = "request", proxyMode = ScopedProxyMode.TARGET_CLASS)
public class MyRequestScopedBean {
    // One per HTTP request
}
Note: For scopes like request and session, Spring needs proxying to inject beans correctly into singleton beans.

📝 Summary Table
Scope		Description							Lifecycle
singleton	One shared instance					Application lifetime
prototype	New instance per request			When requested
request		One per HTTP request				Life of HTTP request
session		One per HTTP session				Life of HTTP session
application	One per ServletContext (web app)	Life of ServletContext

🧩 When to use?
Singleton: Default, for stateless services
Prototype: For stateful or frequently changing beans
Request/Session: When building web apps that require per-request or per-user data storage

================================================================================

🔐 What is Transaction Management?
A transaction is a sequence of operations that must either all succeed or all fail as a single unit.
In Spring Boot, transaction management ensures data consistency, especially across multiple database operations.

🧾 Example Scenario:
Deduct ₹500 from Account A ✅
Add ₹500 to Account B ✅
Both should succeed or both should fail — this is what a transaction ensures.

✅ Key Concepts
Term			Meaning
Atomicity		All steps complete or none do
Consistency		DB moves from one valid state to another
Isolation		Transactions are isolated from each other
Durability		Once committed, the changes are permanent
These are known as the ACID properties.

🚀 Spring Boot Transaction Management
✅ Using @Transactional
@Service
public class TransferService {

    @Autowired
    private AccountRepository accountRepository;

    @Transactional
    public void transferMoney(Long fromId, Long toId, double amount) {
        Account from = accountRepository.findById(fromId).orElseThrow();
        Account to = accountRepository.findById(toId).orElseThrow();

        from.setBalance(from.getBalance() - amount);
        to.setBalance(to.getBalance() + amount);

        accountRepository.save(from);
        accountRepository.save(to);
    }
}
✅ If any exception occurs inside transferMoney(), all changes will be rolled back.

⚙️ Configuration (Optional)
Spring Boot automatically configures transactions if you use:
Spring Data JPA
Spring JDBC
A DataSource bean
Just annotate your service method with @Transactional.

🔄 Rollback Control
By default:
Rollback happens for unchecked exceptions (RuntimeException, Error)
No rollback for checked exceptions (IOException, etc)

✅ To rollback on checked exceptions:
@Transactional(rollbackFor = Exception.class)
⚠️ Common Mistakes
Mistake													Why it's wrong
Calling a @Transactional method from the same class		Spring AOP won’t intercept → no transaction
Forgetting @Transactional								DB changes won't rollback on failure
Not handling exceptions properly						Unexpected commit or partial updates

🧪 Interview Tip:
"Spring uses AOP (Aspect-Oriented Programming) behind the scenes to manage transactions using proxies. When you annotate a 
	method with @Transactional, Spring creates a proxy and wraps the method call to start, commit, or rollback the transaction."

🔧 Transaction Propagation Types
Type			Meaning
REQUIRED		Join existing or create a new transaction (default)
REQUIRES_NEW	Always start a new transaction
NESTED			Start a nested transaction
NOT_SUPPORTED	Run without a transaction
NEVER			Fail if a transaction exists
MANDATORY		Must run in an existing transaction

==============================================================

🎯 What is AOP in Simple Terms?
AOP means writing extra code (like logging, security, transactions) separately from your main business logic, but it still runs 
	automatically when needed.

You don’t need to write logging or security code in every method. Just write it once, and AOP will apply it everywhere you need.

🧠 Real-Life Example:
Imagine a salon 💇‍♀️
You go for:
Haircut ✂️ (Main logic)

The salon also:
Sanitizes chair 🧼 (before)
Says thank you 🙏 (after)

Now, instead of writing these steps (sanitize, thank you) in every haircut method, you write it once using AOP.

🤖 In Code Terms:
Without AOP:
public void bookAppointment() {
  System.out.println("Sanitize chair");
  System.out.println("Doing haircut...");
  System.out.println("Say thank you");
}
You repeat "sanitize" and "thank you" in every method.

With AOP:
@Before
public void sanitizeChair() {}

@After
public void sayThankYou() {}

public void bookAppointment() {
  System.out.println("Doing haircut...");
}
✅ Now these actions happen automatically. You keep your main logic clean!

🔧 How to Use AOP in Spring Boot
Add @Aspect class
Write code with @Before, @After, @Around, etc.
Target where you want it to apply (e.g., all methods in a package)

🔥 Where You See AOP in Real Projects
Task				AOP Used?	How It Helps
Logging					✅			Print logs before/after method
Transactions			✅			Start/commit/rollback automatically
Security checks			✅			Check token/roles before method
Validation				✅			Validate inputs globally

📌 Summary
Term		Means
Aspect		Extra logic (like logging)
Advice		When that logic should run
Pointcut	Where (which method/package)
JoinPoint	Exact place (method call)

==========================================================================

🔄 What is a Circular Dependency?
A circular dependency happens when Bean A depends on Bean B, and Bean B also depends on Bean A — directly or indirectly.
This creates a loop and Spring fails to inject the beans.

❌ Example of Circular Dependency
@Component
public class A {
    @Autowired
    private B b;
}

@Component
public class B {
    @Autowired
    private A a;
}

This will throw:
org.springframework.beans.factory.UnsatisfiedDependencyException:
Circular reference involving A and B

✅ How to Fix It
✅ Option 1: Use @Lazy
@Component
public class A {
    @Autowired
    @Lazy
    private B b;
}
✅ This tells Spring: "Delay the creation of B until it’s really needed," breaking the cycle.

✅ Option 2: Use Constructor Injection + @Lazy
@Component
public class A {
    private final B b;
    public A(@Lazy B b) {
        this.b = b;
    }
}
🔍 Constructor injection is preferred for testability and immutability.

✅ Option 3: Refactor Dependencies
Split common logic into a third bean (C) and inject that instead.
@Component
public class CommonService {}

@Component
public class A {
    @Autowired
    private CommonService common;
}

@Component
public class B {
    @Autowired
    private CommonService common;
}
✅ This is the best long-term fix — it removes tight coupling between A and B.

✅ Option 4: Use Setter Injection
If you don’t want to use @Lazy, you can break the cycle with setter injection:
@Component
public class A {
    private B b;

    @Autowired
    public void setB(B b) {
        this.b = b;
    }
}
🧠 Pro Tips
Situation						Recommended Fix
Tight loop between 2 beans		Use @Lazy on one
Too much coupling				Refactor shared logic to new bean
Complex service dependencies	Consider event listeners or design changes
=========================================================================

✅ What is a Spring Bean?
A Spring Bean is any object that is managed by the Spring container (created, injected, and destroyed by Spring).

🟨 1. @Component – Annotation-based Bean
@Component
public class MyService {
    // automatically registered as a bean
}
✅ Key Points:
Use it on classes
Works with component scanning
Can be used with @Service, @Repository, @Controller (they are specializations of @Component)
Automatically picked up if the package is scanned

🟩 2. @Bean – Method-based Bean
@Configuration
public class AppConfig {

    @Bean
    public MyService myService() {
        return new MyService();
    }
}
✅ Key Points:
Use it on methods
Typically used when:
You need to create a bean manually
You don’t have access to modify the source class
Often used with third-party libraries

🆚 Component vs Bean – Clear Comparison
Feature					@Component						@Bean
Where used				On a class						On a method inside a @Configuration class
Who creates it			Spring via component scanning	You create manually in a config method
When to use				For your own classes			For external classes or complex logic
Autowiring support		✅ Yes							✅ Yes
Custom creation logic	❌ No							✅ Yes (you control creation)

🧠 Real-life Analogy
Situation															Use
You wrote the class													@Component
Class comes from a library (3rd party)								@Bean
You need full control over bean creation (e.g., constructor args)	@Bean

✅ Bonus: Other @Component Variants
Annotation		Meaning
@Component		Generic bean
@Service		Business logic layer
@Repository		DAO/persistence layer
@Controller		Web layer (MVC controller)

All of them behave like @Component — just semantically different.
==============================================================================



