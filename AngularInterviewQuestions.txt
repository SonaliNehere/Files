Here are the Angular interview questions and answers covered in the video, summarized in written format:

1. Important Angular Interview Questions
This section includes various Angular interview questions with code demonstrations.
Learn about Angular's role in UI binding and MVW (Model-View-Whatever) architecture.
Understand the differences between AngularJS and Angular.
Familiarize yourself with the concept of directives in Angular.

2. Types of Directives in Angular
Structural Directive: Changes the structure of the DOM.
Attribute Directive: Alters the appearance or behavior of an element.
Component Directive: Defines a reusable component.

3. Data Binding in Angular
There are four kinds of data binding:
Interpolation (Expression Binding): Data flows from the controller to the view and can be mixed with HTML.
Property Binding: Data flows from the controller to the view, used for user-input elements like textboxes.
Event Binding: Sends events from the view back to the component.
Two-Way Binding: Allows data and events to flow between the view and the component.

4. Angular Architecture
Angular architecture consists of 7 or 8 key components:
Template: The HTML view.
Components: Groups of logically related components.
Modules: Group components together.
Bindings: Define the data flow between the View and the Component.
Directives: Help modify behavior.
Services: Provide common logic across the project.

5. Single Page Application (SPA)
SPA is a concept where the UI is loaded once, improving performance.
Typical websites reload elements like the left menu, footer, and banner on each navigation. In contrast, SPAs load these once and dynamically update the UI.
Angular Routing is used to implement SPA, defining URLs and the respective components that need to be loaded.
router-outlet: Used to load components, and router-link: Used for navigation within the SPA.

6. Routing and Lazy Loading
Routing: Allows navigation between different components.
Lazy Loading: Enables on-demand loading of modules.
Define routes and router outlets to implement routing. Use routerLink in HTML or router.navigate for programmatic navigation.
Lazy loading involves dividing the project into separate modules and using loadChildren in the route configuration.

7. Dependency Injection in Angular
An application design pattern where dependencies are injected from outside, allowing for loose coupling of components.
Angular uses the Provider attribute to implement Dependency Injection, specifying which instances should be injected.

8. Benefits of Dependency Injection
Changing something in one place reflects throughout the project.
Decouples classes, reducing tight coupling.
Eliminates the need for using the 'new' keyword for class instantiation.

9. ng serve vs. ng build
Understand the primary differences between ng serve (used for local development with live reloading) and ng build (used for 
creating a production build).

10. Production Environment
Users in the production environment can access the --prod flag, indicating that they are using the production version of the
 application.
This summary provides a concise overview of the topics and questions discussed in the video regarding Angular.

hAVe you given all that is covered in video
Yes, the summary I provided includes all the key topics and points covered in the video, structured into a clear format. 
Below is a more detailed breakdown to ensure completeness and clarity:

Important Angular Interview Questions

Overview of Angular and its significance in UI binding and the MVW architecture.
Differences between AngularJS and Angular.
The concept of directives in Angular.

Types of Directives
Structural Directive: Changes the DOM structure.
Attribute Directive: Modifies the appearance or behavior of elements.
Component Directive: Defines reusable components.

Data Binding Types
Interpolation (Expression Binding): Data flows from controller to view, mixed with HTML.
Property Binding: Attaches data to user input elements.
Event Binding: Sends events from the view to the component.
Two-Way Binding: Allows bidirectional data flow between view and component.

Angular Architecture Components
Template: The HTML view.
Components: Related groups of components.
Modules: Grouping components.
Bindings: Define data flow between view and component.
Directives: Modify view behavior.
Services: Provide shared functionality.

Single Page Application (SPA) Concept
Enhanced performance due to UI loading only once.
Elements like menus and banners are loaded once; only relevant UI updates occur on interaction.
Use of Angular Routing for navigation; defined through URLs with corresponding components.
Router-outlet: Loads components; router-link: Facilitates navigation.

Routing and Lazy Loading
Implementation of routing for navigation.
Lazy Loading: Loads modules on demand, configured with loadChildren.

Dependency Injection
Design pattern for injecting dependencies, promoting loose coupling.
Implemented via Provider attributes.

Benefits of Dependency Injection
Easy updates that reflect throughout the project.
Reduces tight coupling.
Eliminates the need for instantiation using 'new'.

Difference Between ng serve and ng build
ng serve: Local development server with live reloading.
ng build: Compiles the application for production.

Production Environment Access
The --prod flag signifies access to the production version for certain users.


In Angular, both Promises and Observables are used for handling asynchronous operations, such as API calls. However, they have 
significant differences in behavior and use cases.

1. Promise in Angular
A Promise represents a single asynchronous operation that either resolves successfully or rejects with an error.

Key Features of Promise:
✔ Executes immediately when created.
✔ Can only handle one response (single value).
✔ Not cancellable once started.
✔ Automatically completed after resolution or rejection.

Example of a Promise:
typescript
const myPromise = new Promise((resolve, reject) => {
  setTimeout(() => {
    resolve("Data received!");
  }, 2000);
});

myPromise.then((data) => {
  console.log(data); // Output: "Data received!" after 2 seconds
});
Use Case:
✅ When you need a one-time response, such as fetching data from an API.

2. Observable in Angular
An Observable is a more powerful alternative to Promises. It allows multiple values to be emitted over time and supports 
cancellation.

Key Features of Observable:
✔ Supports multiple values over time (streams of data).
✔ Lazy execution – it only runs when subscribed.
✔ Cancellable – you can unsubscribe to stop receiving data.
✔ Supports operators like map(), filter(), retry(), etc. for transformation.

Example of an Observable:
typescript
import { Observable } from 'rxjs';

const myObservable = new Observable((observer) => {
  setTimeout(() => {
    observer.next("First Data");
  }, 1000);
  
  setTimeout(() => {
    observer.next("Second Data");
    observer.complete(); // Marks it as finished
  }, 2000);
});

myObservable.subscribe({
  next: (data) => console.log(data),   // Handles emitted values
  error: (err) => console.log(err),    // Handles errors
  complete: () => console.log("Done"), // Called when complete
});
Use Case:
✅ When dealing with streams of data, such as WebSockets, user input events, or real-time API responses.

3. Difference Between Promise and Observable
Feature					Promise							Observable
Emits Values			Single value					Multiple values
Execution				Immediately starts				Executes only when subscribed
Cancellable				❌ No							✅ Yes (unsubscribe)
Operators(map, filter)	❌ No							✅ Yes
Better for API Calls?	✅ Yes (one-time calls)			✅ Yes (realtime updates)

When to Use What?
Use Promise when you need a one-time response (e.g., HTTP request).

Use Observable when dealing with real-time data, multiple values, or streams (e.g., WebSocket, user events, live updates).


index.html
   ↓
main.ts → AppModule → AppComponent
   ↓
HTML Template → Data Binding, Directives
   ↓
Router (optional) → Route-based Component Loads
   ↓
Services Injected → Data Fetched/Updated
   ↓
Change Detection → DOM Updates Automatically
