Part 1: Shell Scripting Basics
1Ô∏è‚É£ Shebang
#!/bin/bash

Indicates which shell to use to run the script.
Here, /bin/bash means the script uses Bash shell.

2Ô∏è‚É£ Variables
version="2.0.12"
previousVersion="2.0.11"

Variables store values.
No spaces around =.
Access a variable using $version.

3Ô∏è‚É£ Environment Variables & Colors
export RED="\e[1;31m"
export NC="\e[0m"

export makes a variable available to child processes.
Here, these variables store ANSI color codes for colored text output.
NC means ‚ÄúNo Color‚Äù to reset terminal color.

4Ô∏è‚É£ Conditional Statements
if [[ "$curruser" != "root" ]]; then
    SUDO=sudo
else
    SUDO=""
fi

Checks a condition (curruser != root).
[[ ... ]] is Bash conditional syntax.
Executes different commands depending on the condition.

5Ô∏è‚É£ Reading User Input
echo "Enter the container id:"
read container_id

echo prints text.
read takes input from the user and stores it in a variable (container_id).

6Ô∏è‚É£ Running Commands
docker ps -q -f id=$container_id

docker ps lists running containers.
-q returns only container IDs.
-f id=... filters by container ID.

7Ô∏è‚É£ Loops and Conditions Inside Scripts
if [ condition ]; then ... else ... fi ‚Üí runs commands based on condition.
for and while loops iterate over items (not heavily used in these scripts).

8Ô∏è‚É£ File Operations
rm -rf dist
mkdir /some/path
cp -r src dest

rm -rf ‚Üí remove files/directories recursively without asking.
mkdir ‚Üí create directories.

cp -r ‚Üí copy folders recursively.

9Ô∏è‚É£ Docker Commands in Scripts
docker exec -it container_id command
docker cp local_path container_id:container_path

docker exec -it ‚Üí run a command inside a running container interactively.
docker cp ‚Üí copy files/folders to or from a container.

10Ô∏è‚É£ Redirection
> nohup.out

> redirects output to a file, overwriting existing content.
>> appends instead of overwriting.

Part 2: Line-by-Line Explanation of autoinstall.sh
1. Color & User Setup
export BLACK="\e[1;39m"
...
curruser=$(whoami)
if [[ "$curruser" != "root" ]]; then
    export SUDO=sudo
else
    export SUDO=""
fi

Sets color codes for terminal messages.
Checks if the current user is root. If not, prepends sudo to commands that require root permissions.

2. Version Setup & Clearing Logs
version="2.0.12"
previousVersion="2.0.11"
> nohup.out

Sets current version and previous version of BR.
Clears nohup.out (log file) before deployment.

3. Remove old build
$SUDO rm -rf dist

Deletes previous dist folder to avoid conflicts with new deployment.

4. Read Container ID
echo "Enter the container id:"
read container_id

Takes input from the user: the Docker container where BR is deployed.

5. Check if Container is Running
container_exists=$($SUDO docker ps -q -f id=$container_id)
if [ -n "$container_exists" ]; then ...

$() ‚Üí executes command and stores output in variable.
-n ‚Üí checks if variable is not empty (container exists).

6. Check BR Directory in Container
docker exec -it $container_id [ -d /opt/JIO-BR/rtJio_5G_BR ]

Checks if the BR folder exists inside the container.
[ -d path ] ‚Üí true if the directory exists.

7. Check if BR is Running
PN=$(docker exec -it $container_id sh -c "ps -ef | grep BRBootstrapper | grep -v grep | tail -c 15")
if [ -z "$PN" ]; then ...

Lists running processes inside container.
Looks for BRBootstrapper.
-z ‚Üí checks if variable is empty (BR not running).

8. Backup Old Configuration
docker exec -it $container_id mkdir $BP/../../br-bkp/br-$previousVersion
cp -r $BP/configuration/ $BP/../../br-bkp/br-$previousVersion/.

Creates backup folder for previous version.
Copies configuration, bin, lib, and README.md to backup.

9. Unzip New Package
unzip "jio5gbr-$version.zip" > /dev/null

Extracts the new BR package.
> /dev/null ‚Üí suppresses output.

10. Copy New Files to Container
docker cp dist/JIO-BR/rtJio_5G_BR/bin/rtSDP_Run.jar $container_id:$BP/bin/
docker cp dist/JIO-BR/rtJio_5G_BR/lib $container_id:$BP/

Updates bin, lib, and other necessary folders inside the container.

11. Clean Up
rm -rf dist

Deletes extracted dist folder to save space.

12. Completion Message
echo -e $BLUE"#########################$NC$GREEN BR-$version Upgrade Complete$NC$BLUE #########################"$NC

Prints colored message that upgrade is complete.

Part 3: Line-by-Line Explanation of rollback.sh

Most of rollback.sh is similar to autoinstall.sh, but the key differences:

1Ô∏è‚É£ Instead of deploying new version, it restores the previous version from backup.

docker exec $container_id cp -r $BP/../../br-bkp/br-$previousVersion/bin/ $BP/
docker exec $container_id cp -r $BP/../../br-bkp/br-$previousVersion/configuration/ $BP/
docker exec $container_id cp -r $BP/../../br-bkp/br-$previousVersion/lib/ $BP/

Copies bin, config, lib from backup to current BR folder.

2Ô∏è‚É£ Checks if backup exists

BrBkp=$($SUDO docker exec -it $container_id sh -c '[ -d $BP/../../br-bkp/br-$previousVersion ] && echo "exists" || echo "not exists"')
if [ "$BrBkp" = "not exists" ]; then ...

Ensures rollback only happens if backup is available.

3Ô∏è‚É£ Ensures BR is not running before rollback (like in autoinstall.sh).

4Ô∏è‚É£ Completion message signals rollback is done.

‚úÖ Summary

autoinstall.sh ‚Üí automates upgrade: backup old files ‚Üí unzip new package ‚Üí copy files ‚Üí cleanup.

rollback.sh ‚Üí automates rollback: restore files from backup if upgrade fails.

Both scripts use Docker commands, conditional checks, and automation to reduce deployment time.

=========================================================================

Perfect üëç let‚Äôs build your understanding from base.
We‚Äôll go step by step ‚Äî first I‚Äôll explain what shell scripting is, then we‚Äôll go line by line for your two scripts.

üü¢ Step 1: What is a Shell Script?

A shell is a program in Linux/Unix that takes commands from you and gives them to the OS to execute.
Examples: bash, sh, zsh.

A shell script is just a text file with a sequence of shell commands written inside.
Instead of typing commands one by one in the terminal, you put them in a file and run it like a program.

Example:

#!/bin/bash
echo "Hello, Sonali!"

#!/bin/bash ‚Üí tells the system which shell should run this script (here: bash).
echo ‚Üí prints text on screen.

You save this as test.sh, then run:
chmod +x test.sh   # make it executable
./test.sh

Output ‚Üí Hello, Sonali!

üü¢ Step 2: Basic Linux Commands (You‚Äôll see these in scripts)

cd /path ‚Üí change directory.
ls ‚Üí list files.
pwd ‚Üí print current working directory.
mkdir dir1 ‚Üí create a new folder.
cp file1 file2 ‚Üí copy file.
mv file1 file2 ‚Üí move/rename file.
rm file1 ‚Üí delete file.
tar -cvf backup.tar /path ‚Üí create archive (backup).
scp file user@server:/path ‚Üí secure copy file to another server.
chmod +x file.sh ‚Üí give execute permission.
./file.sh ‚Üí run the script.

üü¢ Step 3: Structure of Deployment Scripts
A deployment script automates these things:

Stop old version of app.
Take backup.
Copy new files.
Start new app.
Verify if running.

This automation is why your deployment time was reduced by 30% ‚Äî instead of manual steps, one script runs everything.

================================================================================

Learn commands deeply with examples (hands-on basics).

Then take your two scripts and go line by line, explaining every command in context.

That way, you‚Äôll be able to confidently explain to an interviewer how the script works and how it cut deployment time.

üü¢ Step 1: Core Linux Commands with Deep Explanation
1. echo

Prints text on screen.

echo "Hello World"


‚û°Ô∏è Output: Hello World

2. pwd (print working directory)

Shows the current folder you‚Äôre in.

pwd


‚û°Ô∏è /home/sonali/projects

3. cd (change directory)
cd /var/log     # go to /var/log
cd ..           # go one step back
cd ~            # go to home folder

4. ls (list files)
ls              # list files
ls -l           # long listing with permissions
ls -la          # includes hidden files

5. mkdir (make directory)
mkdir backup
mkdir -p project/src/logs   # create nested directories

6. cp (copy)
cp file1.txt file2.txt      # copy file
cp -r dir1 dir2             # copy folder with contents

7. mv (move / rename)
mv oldname.txt newname.txt  # rename file
mv file.txt /tmp/           # move to another directory

8. rm (remove)
rm file.txt
rm -r foldername   # remove directory with files


‚ö†Ô∏è Dangerous! Always double check.

9. tar (archive)
tar -cvf backup.tar myfolder    # create archive
tar -xvf backup.tar             # extract archive


c = create
x = extract
v = verbose (show process)
f = file name

10. scp (secure copy between servers)
scp file.txt user@192.168.1.5:/home/user/


‚û°Ô∏è Copies file.txt from local to remote server.

11. chmod (change permissions)
chmod +x deploy.sh   # make script executable

12. ./script.sh

Runs your script.
If you just type script.sh, system may not find it unless it‚Äôs in $PATH.
That‚Äôs why we use ./.

13. ps (process status) + grep
ps -ef | grep java


‚û°Ô∏è Find running java processes.

14. kill
kill -9 <pid>


‚û°Ô∏è Force kill a process.

15. service or systemctl
service tomcat start
service tomcat stop
systemctl restart nginx


‚û°Ô∏è Control background services (like Tomcat, Nginx).

‚úÖ These are the building blocks you‚Äôll see in your deployment scripts.

üü¢ Step 2: Applying Commands in Deployment Scripts

A typical deployment script will:

Backup existing version (using cp, tar).
Stop old service (using ps, kill, service).
Deploy new build (using scp, mv, cp).
Restart service (using service, systemctl).
Verify (using ps, curl, echo).

This is why your deployment became 30% faster ‚Üí fewer manual steps, fewer mistakes, fully automated.


üîé Rollback Script Explained (line by line)
#!/bin/bash

Shebang line ‚Üí tells Linux to run this script using Bash shell.

export BLACK="\e[1;39m"
export blue="\e[0;34m"
...
export NC="\e[0m"

These are color codes for terminal text.

Example: echo -e $RED "Error!" $NC ‚Üí prints ‚ÄúError!‚Äù in red.

NC = ‚ÄúNo Color‚Äù (reset).

This is just for making logs look nice.

curruser=$(whoami)
if [[ "$curruser" != "root" ]] ; then
   export SUDO=sudo
else
   export SUDO=""
fi

Gets current user (whoami).
If you are not root, it sets SUDO=sudo.
If you are root, no need to prefix sudo.

So later script can just run $SUDO docker ‚Ä¶ (works for both cases).

version="2.0.12"
previousVersion="2.0.11"

Defines current version and previous version.
Used during rollback to replace 2.0.12 with 2.0.11.

> nohup.out

Clears file nohup.out if exists (truncate to 0 bytes).
nohup.out normally stores background logs ‚Üí they clean it at start.

#Deleting previous dist folder if any
$SUDO rm -rf dist

Deletes local folder dist.

-r ‚Üí recursive, -f ‚Üí force, no confirm.
Usually build output (dist = distributable package).
Removes old junk before rollback.

echo "Enter the container id:"
read container_id

Asks user to type Docker container ID.
Stores it in variable container_id.

container_exists=$($SUDO docker ps -q -f id=$container_id)

Runs docker ps (list running containers).

-q ‚Üí quiet (just IDs).
-f id=... ‚Üí filter by container id.
If container is running, variable will contain its ID.

if [ -n "$container_exists" ]; then

Checks if variable is non-empty ‚Üí means container is running.

    if $SUDO docker exec -it $container_id [ -d /opt/JIO-BR/rtJio_5G_BR ] 2>/dev/null;

	Runs inside container: check if directory /opt/JIO-BR/rtJio_5G_BR exists.

docker exec -it ‚Üí run command inside container.

[ -d path ] ‚Üí true if directory exists.

2>/dev/null ‚Üí hide error messages.

		PN="`$SUDO docker exec -it $container_id sh -c "ps -ef | grep BRBootstrapper | grep -v grep | tail -c 15"`"

Runs inside container: ps -ef lists processes.
grep BRBootstrapper ‚Üí find if BR is running.
grep -v grep ‚Üí remove the grep process itself.
tail -c 15 ‚Üí only last 15 characters (just for neatness).
If empty ‚Üí BR is not running. If not empty ‚Üí BR running.

		if [ -z "$PN" ]

-z = check if variable is empty.
If empty ‚Üí service not running ‚Üí safe to rollback.

			BP="/opt/JIO-BR/rtJio_5G_BR"
			BrBkp=$($SUDO docker exec -it $container_id sh -c '[ -d $BP/../../br-bkp/br-$previousVersion ] && echo "exists" || echo "not exists"')

Sets base path BP.
Inside container, check if backup folder exists:
/opt/JIO-BR/rtJio_5G_BR/../../br-bkp/br-2.0.11

If yes ‚Üí print ‚Äúexists‚Äù, else ‚Äúnot exists‚Äù.

			if [ "$BrBkp" = "not exists" ]

If backup not available ‚Üí print error.

				$SUDO docker exec -it $container_id sh -c "rm -rf $BP/lib"
				echo -e $BLUE"updating bin/lib/config"$NC

Deletes current lib folder.

Prepares to replace with backup version.

        $SUDO docker exec $container_id cp -r $BP/../../br-bkp/br-$previousVersion/bin/ $BP/
        $SUDO docker exec $container_id cp -r $BP/../../br-bkp/br-$previousVersion/configuration/ $BP/
        $SUDO docker exec $container_id cp -r $BP/../../br-bkp/br-$previousVersion/lib/ $BP/
        $SUDO docker exec $container_id cp -r $BP/../../br-bkp/br-$previousVersion/README.md $BP/../

Copy backup files from previous version into current path.

Folders restored:
bin
configuration
lib
README.md

				echo -e $BLUE"updated bin/lib/config successfully."$NC

Prints success message.

				$SUDO cd -

Goes back to previous directory (not important here).

				echo -e $BLUE"#########################$NC$GREEN BR-$version Rollback Complete$NC$BLUE #########################"$NC

Prints Rollback Complete message with colors.

		else
			echo -e $RED"BR is up & running, Kindly ShutDown before Upgrade"$NC


If BR service is still running ‚Üí abort rollback.

Otherwise ‚Üí files may get corrupted.

    else
        echo -e $RED"The directory /opt/JIO-BR/rtJio_5G_BR does not exist in the container $container_id."$NC


If directory not found ‚Üí print error.

else
    echo -e $RED"Error: Container $container_id does not exist or is not running."$NC
fi


If container doesn‚Äôt exist ‚Üí show error.

üéØ Final Summary (Rollback Script)

This script:
Checks user permissions (root or sudo).
Takes container ID from user.
Verifies container is running and target directory exists.
Checks if service is down (so rollback is safe).
Checks if backup of previous version exists.
Restores previous version files (bin, lib, config).
Prints success or failure messages in colored text.

‚úÖ This automation saved time because earlier rollback may have been manual:

Log into container.
Stop process.
Delete current files.
Copy backup files.
Restart.

Now ‚Üí just run script, it does everything.


üîé Auto Install (Deployment) Script ‚Äì Line by Line
#!/bin/bash

Use Bash shell for this script.

export BLACK="\e[1;39m"
export blue="\e[0;34m"
...
export NC="\e[0m"

Color codes for printing logs nicely (same as rollback script).

$RED, $GREEN, $BLUE ‚Üí different colors.

$NC = reset to default color.

curruser=$(whoami)
if [[ "$curruser" != "root" ]] ; then
   export SUDO=sudo
else
   export SUDO=""
fi

Detects if current user is root.

If not, sets $SUDO=sudo.
Ensures script works for both root and normal users.

version="2.0.12"

Current version of BR you are deploying.

> nohup.out

Clears log file nohup.out (so fresh logs are written).

#Deleting previous dist folder if any
$SUDO rm -rf dist

Removes old dist folder (package build output).
Ensures no conflicts with new package.

echo "Enter the container id:"
read container_id

Reads Docker container ID from user input.

container_exists=$($SUDO docker ps -q -f id=$container_id)

Checks if that container is running.
If yes ‚Üí $container_exists will have ID.
If no ‚Üí empty string.
if [ -n "$container_exists" ]; then

If non-empty ‚Üí container is running.

    if $SUDO docker exec -it $container_id [ -d /opt/JIO-BR/rtJio_5G_BR ] 2>/dev/null;

Runs inside container ‚Üí check if target directory /opt/JIO-BR/rtJio_5G_BR exists.
If not, deployment cannot proceed.

        PN="`$SUDO docker exec -it $container_id sh -c "ps -ef | grep BRBootstrapper | grep -v grep | tail -c 15"`"

Runs inside container:
ps -ef ‚Üí show running processes.
grep BRBootstrapper ‚Üí search for BR process.
If not found ‚Üí safe to deploy.
If found ‚Üí service already running (deployment should not overwrite running process).

        if [ -z "$PN" ]

If PN is empty ‚Üí BR not running ‚Üí safe to deploy.
If not empty ‚Üí abort deployment.

            BP="/opt/JIO-BR/rtJio_5G_BR"

Path where BR is installed inside container.

            echo -e $BLUE"Taking backup of bin/lib/config"$NC
            $SUDO docker exec $container_id cp -r $BP/bin $BP/../../br-bkp/br-$version/
            $SUDO docker exec $container_id cp -r $BP/lib $BP/../../br-bkp/br-$version/
            $SUDO docker exec $container_id cp -r $BP/configuration $BP/../../br-bkp/br-$version/

Takes backup of current installation before overwriting.
Backs up bin, lib, and configuration folders into a backup directory with version name.

            echo -e $BLUE"Extracting new package"$NC
            unzip BR-$version.zip -d dist

Extracts new build package (BR-2.0.12.zip) into dist folder.

            echo -e $BLUE"Copying new files to container"$NC
            $SUDO docker cp dist/bin $container_id:$BP/
            $SUDO docker cp dist/lib $container_id:$BP/
            $SUDO docker cp dist/configuration $container_id:$BP/

Copies new files from dist/ into container at $BP.
Uses docker cp command to copy from host ‚Üí container.

            echo -e $GREEN"Deployment of BR-$version completed successfully"$NC

Prints success message.

        else
            echo -e $RED"BR is up & running, Kindly ShutDown before Upgrade"$NC
        fi

If BR process was running ‚Üí deployment is blocked to prevent corruption.

    else
        echo -e $RED"The directory /opt/JIO-BR/rtJio_5G_BR does not exist in the container $container_id."$NC
    fi
else
    echo -e $RED"Error: Container $container_id does not exist or is not running."$NC
fi

Error handling for missing directory or container.

üéØ Final Summary (Deployment Script)
The autoinstall script does these steps:

Check if container exists and is running.
Verify BR process is not running (safe to deploy).
Take backup of existing version (bin, lib, config).
Extract new build package.
Copy new files into container path.
Print success or failure messages.

‚úÖ Together with rollback.sh:

autoinstall.sh = deploy new version.
rollback.sh = restore previous version if something goes wrong.

This is how you saved ~30% deployment time ‚Üí automated checks, backups, file copies, and rollbacks.

